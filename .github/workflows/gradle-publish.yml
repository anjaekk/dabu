# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Backend Publishing with gradle , java17 

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   development-deploy:
#     if: github.event_name == 'pull_request'
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write

#     steps:
#     # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
#     - uses: actions/checkout@v3

#     # open jdk 17 버전 환경을 세팅
#     - name: Set up JDK 17
#       uses: actions/setup-java@v3
#       with:
#         java-version: '17'
#         distribution: 'adopt'
        
#         # server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
#         # settings-path: ${{ github.workspace }} # location for the settings.xml file

#     # Github secrets로부터 데이터를 받아서, 워크 플로우에 파일을 생성
#     - name: Make application.yml
#       run: |
#           cd ./src/main/resources
#           # touch ./application.yml
#           echo "${{ secrets.YML }}" > ./application-security.yml
#           echo "${{ secrets.PROD_YML }}" > ./application-prod.yml
#       shell: bash	

#     # gradle을 통해 소스를 빌드.
#     - name: Build with Gradle
#       run: |
#            chmod +x ./gradlew
#            ./gradlew clean build -x test
#     # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push 합니다.
#     # 이 때 사용되는 ${{ secrets.DOCKER_REPO }}/bside-17-2-back 가 위에서 만든 도커 repository 입니다.
#     - name: Docker build & push to docker repo
#       run: |
#            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#            # docker build -t bside-17-2-back:latest .
#            # docker tag bside-17-2-back:latest ${{ secrets.DOCKER_USERNAME }}/bside-17-2-back:latest
#            docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/bside-17-2-back .
#            docker push ${{ secrets.DOCKER_REPO }}/bside-17-2-back

#     # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행합니다.
#     # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행하는 것입니다. 
#     # 실행 시, docker-compose를 사용합니다.
#     - name: Deploy to Development Server
#       uses: appleboy/ssh-action@master
#       id: deploy
#       with:
#         host: ${{ secrets.DEPLOYMENT_HOST }}
#         username: ${{ secrets.DEPLOYMENT_USERNAME }}
#         password: ${{ secrets.DEPLOYMENT_PASSWORD }}
#         port: ${{ secrets.DEPLOYMENT_PORT }}
#         # envs: GITHUB_SHA
#         script: |
#           docker rm -f $(docker ps -qa)
#           docker pull ${{ secrets.DOCKER_REPO }}/bside-17-2-back
#           docker-compose up -d
#           docker image prune -f

#   production-deploy:
#     if: github.event_name == 'push'
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write

#     steps:
#       - name: Deploy to Production Server
#         uses: appleboy/ssh-action@master
#         id: deploy
#         with:
#           host: ${{ secrets.PROD_DEPLOYMENT_HOST }}
#           username: ${{ secrets.PROD_DEPLOYMENT_USERNAME }}
#           password: ${{ secrets.PROD_DEPLOYMENT_PASSWORD }}
#           port: ${{ secrets.PROD_DEPLOYMENT_PORT }}
#           # envs: GITHUB_SHA
#           script: |
#             docker rm -f $(docker ps -qa)
#             docker pull ${{ secrets.DOCKER_REPO }}/bside-17-2-back
#             docker-compose up -d
#             docker image prune -f
